<?php

/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       https://opensource.org/licenses/mit-license.php MIT License
 */

App::uses('AppController', 'Controller');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		https://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class PostsController extends AppController {

    public $components = array('Flash', 'Paginator');
//    public $paginate = [
//        'page' => 1,
//        'limit' => 2,
//        'maxLimit' => 3,
//    ];

    public function beforeFilter()
    {
        header('Access-Control-Allow-Origin: *');

        header('Access-Control-Allow-Methods: GET, POST');

        header("Access-Control-Allow-Headers: X-Requested-With");

        parent::beforeFilter(); // TODO: Change the autogenerated stub
    }

    public function view() {
        $this->layout = false;
        $page = $this->request->query['page'];
        $limit = $this->request->query['limit'];
        $total = $this->Post->find('count');
        $this->Paginator->settings = array(
            'page' => $page,
            'limit' => $limit,
            'maxlimit' => 3
        );
        $post = $this->Paginator->paginate('Post');
        $post = [
          'list' => $post,
          'total' => $total
        ];
        $this->response->type('application/json');
        $this->response->body(json_encode($post));
        return $this->response->send();
    }

    public function add() {
        $this->layout = false;
        $response = array('status'=>'failed', 'message'=>'HTTP method not allowed');

        if($this->request->is('post')){

            //get data from request object
            $data = $this->request->input('json_decode', true);

            if(empty($data)){
                $post = $this->request->data;
                $post['file'] = $this->request->form['image'];

                if(!empty($post['file'])) {
                    $ext = substr(strtolower(strrchr($post['file']['name'], '.')), 1);
                    $arr_ext = array('jpg', 'jpeg', 'gif','png');

                    if (in_array($ext, $arr_ext)) {
                        move_uploaded_file($post['file']['tmp_name'], WWW_ROOT . 'img/posts/' . $post['file']['name']);
                        $link_path ='http://localhost/blog_demo/app/webroot/' . 'img/posts/' . $post['file']['name'];
                        $post['image'] = $link_path;
                        //prepare the filename for database entry
                    } else {
                        $this->Flash->error(__('File khong dung dinh dang'));
                    }
                }
            }

            //response if post data or form data was not passed
            $response = array('status'=>'failed', 'message'=>'Please provide form data');

            if(!empty($post)){
                //call the model's save function
                $new_post = $this->Post->save($post);
                if($new_post){
                    //return success
                    $response = array('status'=>'success','message'=>'Post successfully created');
                } else{
                    $response = array('status'=>'failed', 'message'=>'Failed to save data');
                }
            }
        }

        $this->response->type('application/json');
        $this->response->body(json_encode($response));
        return $this->response->send();
    }

    public function update() {
        $this->layout = false;
        $response = array('status'=>'failed', 'message'=>'HTTP method not allowed');
        if($this->request->is('post')){

            //get data from request object
            $data = $this->request->input('json_decode', true);

            if(empty($data)){
                $post = $this->request->data;
                $post['file'] = $this->request->form['image'];
            }


            if(!empty($post['id'])){
                //set the post ID to update
                print_r($post);

                $this->Post->id = $post['id'];
                //call the model's save function
//                var_dump($new_post['Post']);

                if(!empty($post['file'])) {
                    $ext = substr(strtolower(strrchr($post['file']['name'], '.')), 1);
                    $arr_ext = array('jpg', 'jpeg', 'gif','png');

                    if (in_array($ext, $arr_ext)) {
                        move_uploaded_file($post['file']['tmp_name'], WWW_ROOT . 'img/posts/' . $post['file']['name']);
                        $link_path = 'http://localhost/blog_demo/app/webroot/' . 'img/posts/' . $post['file']['name'];
                        $post['image'] = $link_path;

                        //prepare the filename for database entry
                    } else {
                        $this->Flash->error(__('File khong dung dinh dang'));
                    }
                }
                $new_post = $this->Post->save($post);

                if($new_post){
                    //return success
                    $response = array('status'=>'success','message'=>'Post successfully updated');
                } else{
                    $response = array('status'=>'failed', 'message'=>'Failed to save data');
                }
            }
        }

        $this->response->type('application/json');
        $this->response->body(json_encode($response));
        return $this->response->send();
    }

    public function delete(){
        $this->layout = false;

        //set default response
        $response = array('status'=>'failed', 'message'=>'HTTP method not allowed');

        //check if HTTP method is DELETE
        if($this->request->is('delete') || $this->request->is('post')){
            //get data from request object
            $data = $this->request->input('json_decode', true);
            if(empty($data)){
                $data = $this->request->data;
            }

            //check if product ID was provided
            if(!empty($data['id'])){
                if($this->Post->delete($data['id'], true)){
                    $response = array('status'=>'success','message'=>'Post successfully deleted');
                }
            }
        }

        $this->response->type('application/json');
        $this->response->body(json_encode($response));
        return $this->response->send();
    }
}

